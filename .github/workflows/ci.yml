# 履约驱动酒店管理系统 - CI/CD流水线
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: TypeScript类型检查
      run: npm run typecheck
      
    - name: ESLint代码检查
      run: npm run lint
      
    - name: Prettier格式检查
      run: npm run format -- --check

  # 单元测试和覆盖率
  test:
    name: 测试套件
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 运行单元测试
      run: npm run test:coverage
      
    - name: 上传测试覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: fulfillment-driven-tests
        fail_ci_if_error: true
        
    - name: 检查测试覆盖率阈值
      run: |
        COVERAGE=$(grep -o '"pct":[0-9]*' coverage/coverage-summary.json | head -1 | cut -d: -f2)
        echo "当前测试覆盖率: ${COVERAGE}%"
        if [ $COVERAGE -lt 90 ]; then
          echo "❌ 测试覆盖率 ${COVERAGE}% 低于要求的90%"
          exit 1
        else
          echo "✅ 测试覆盖率 ${COVERAGE}% 满足要求"
        fi

  # 性能测试
  performance-test:
    name: 性能基准测试
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 启动测试数据库
      run: |
        docker run -d --name test-couchdb -p 5984:5984 -e COUCHDB_USER=admin -e COUCHDB_PASSWORD=password couchdb:3.3
        sleep 10  # 等待数据库启动
        
    - name: 运行性能测试
      run: npm run test:performance
      env:
        COUCHDB_URL: http://admin:password@localhost:5984
        
    - name: 清理测试环境
      if: always()
      run: docker stop test-couchdb && docker rm test-couchdb

  # 构建验证
  build:
    name: 构建验证
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建项目
      run: npm run build
      
    - name: 检查构建产物
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ 构建失败，未生成dist目录"
          exit 1
        fi
        
        if [ ! -f "dist/index.html" ]; then
          echo "❌ 构建失败，未生成index.html"
          exit 1
        fi
        
        echo "✅ 构建成功"
        
    - name: 分析包大小
      run: |
        BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
        echo "构建产物大小: $BUNDLE_SIZE"
        
        # 检查是否超过500KB限制
        BUNDLE_KB=$(du -sk dist/ | cut -f1)
        if [ $BUNDLE_KB -gt 500 ]; then
          echo "⚠️ 包大小 ${BUNDLE_KB}KB 超过建议的500KB"
        else
          echo "✅ 包大小符合要求"
        fi

  # Docker镜像构建
  docker-build:
    name: Docker镜像构建
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 构建Docker镜像
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.dev
        push: false
        tags: fulfillment-driven-hotel:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    name: 安全漏洞扫描
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 运行npm audit
      run: npm audit --audit-level high
      
    - name: CodeQL安全分析
      uses: github/codeql-action/init@v2
      with:
        languages: typescript, javascript
        
    - name: 自动构建
      uses: github/codeql-action/autobuild@v2
      
    - name: 执行CodeQL分析
      uses: github/codeql-action/analyze@v2

  # 部署到演示环境(仅main分支)
  deploy-demo:
    name: 部署到演示环境
    runs-on: ubuntu-latest
    needs: [test, build, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: demo
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建生产版本
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: 部署到GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: fulfillment-hotel-demo.example.com  # 替换为实际域名

  # 通知
  notify:
    name: 构建结果通知
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always()
    
    steps:
    - name: 发送构建结果通知
      if: always()
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ 构建成功 - 所有检查通过"
        else
          echo "❌ 构建失败 - 请检查错误日志"
          exit 1
        fi